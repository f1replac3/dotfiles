" Much of this is pulled from tomnomnom dotfiles
" and imxiaobo dotfiles

""""""""""""""""""
" Vundle + Plugins
""""""""""""""""""

set nocompatible
filetype off

" let g:vundle_default_git_proto = 'git'
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Bundles
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
"Plugin 'sj1/gundo.vim'
Plugin 'godlygeek/tabular'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'TomNomNom/xoria256.vim'
"Plugin 'faith/vim-go'
Plugin 'rust-lang/rust.vim'
Plugin 'valloric/youcompleteme'
Plugin 'udalov/kotlin-vim'
Plugin 'ctrlpvim/ctrlp.vim'         " Fuzzy file and buffer nav
Plugin 'jlanzarotta/bufexplorer'    " Visual buffer nav    

call vundle#end()

" Required for vundle
filetype plugin indent on


""""""""""""""
" Display + UI
""""""""""""""

" Highlighting
syntax on
set encoding=utf-8

" Airline config
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled=1
let g:airline_theme='powerlineish'
let g:airline_detect_modified=1         " Show [+] on modified buffers

" History
set history=1000

" Display
set ls=2            " Always show status line
set showmode        " Show Mode: -- INSERT -- etc
set showcmd         " Show partial command in last line
set ruler           " Show cursor position
set title           " Set terminal title to filename
set nu              " Show line numbers
set relativenumber  " Show relative line numbers compared to current line (current line = 0)


" Line wrapping
set nowrap
set linebreak
set showbreak=↪\ 


""""""""""""""""""""""
" Security + Hardening
""""""""""""""""""""""

set modeline        " Allow per-file overrides via modeline
set modelines=5     " Only scan first/last 5 lines of file
set nomodelineexpr  " Disallow : set expr= in modelines 
set secure          " Restrict unsafe commands from modelines/autocmds (e.g., !shell)

" Warn if shell is changed from baseline
augroup DetectShellOverride
  autocmd!
  autocmd OptionSet shell if &shell !=# '/bin/bash' 
        \ echomsg '⚠️  shell modified: ' . &shell |
        \ call writefile(
        \   [strftime('%F %T') . ' ⚠️ shell modified: ' . &shell],
        \   expand('~/.vim/shell_override.log'),
        \   'a'
        \ )
        \ | endif
augroup END

"""""""""""""""""""""""""""""""""""
" Buffer Behavior + Indent Defaults
"""""""""""""""""""""""""""""""""""
set autoindent                  " Basic indent replication (default fallback)
set hidden                      " Enable buffer switching without saving
set backspace=eol,start,indent  " Make backspace a bit nicer

"""""""""""""""""
" Search Behavior
"""""""""""""""""
set ignorecase                  " Case-insensitive search
set smartcase                   " If search contains uppercase
set gdefault                    " Substitute globally by default
set hlsearch                    " Highlight search matches
set showmatch                   " Breifly jump to matching paren

"""""""""""""
" Colorscheme
"""""""""""""
if has("termguicolors")
  set termguicolors
endif
try
  colorscheme xoria256
catch /^Vim\%((\a\+)\)\=:E185/
  echom "⚠️  Colorscheme 'xoria256' not found. Falling back to default."
endtry

"""""""""""""""""""""
" Mappings + Commands
"""""""""""""""""""""
let mapleader = ","

" Buffer Nav
nnoremap <leader>be :enew<CR>               " Open scratch pad buffer
nnoremap <leader>bp :bprevious<CR>          " Previous
nnoremap <leader>bn :bnext<CR>              " Next
nnoremap <leader>bl :ls<CR>                 " List ALL buffers
nnoremap <leader>bd :bp \| bd #<CR>         " Delete current buffer safely
nnoremap <leader>bb :BufExplorer<CR>        " Open visual buffer switcher

" Split Navigation
nnoremap <leader>sv :vsplit<Space>          " Vertical split
nnoremap <leader>sh :split<Space>           " Horizontal split
nnoremap <leader>so :only<CR>               " Close all splits but the current

" Switch tabs
nnoremap <leader>tn :tabnew<CR>             " New tab
nnoremap <leader>tc :tabclose<CR>           " Close tab
nnoremap <leader>to :tabonly<CR>            " Close all tabs but the current
nnoremap <leader>tl :tabprevious<CR>        " Previous tab
nnoremap <leader>tr :tabnext<CR>            " Next tab           

" Fuzzy Find (ctrlp)
nnoremap <C-p> :CtrlP<CR>                   " Find files
nnoremap <leader>fb :CtrlPBuffer<CR>        " Find from open buffers

" Launch new tab in chosen directory
command! -nargs=1 TabRepo tabnew | execute 'lcd' <q-args> | :NERDTree
" example usage: :TabRepo ~/repos/sysadmin-playbooks

nnoremap <leader>ub :TabRepo ~/src/github.com/f1replac3/ubuntu-provisioning<CR>
nnoremap <leader>hl :TabRepo ~/src/github.com/f1replac3/homelab<CR>
nnoremap <leader>n :NERDTreeToggle<CR>      " Toggle NerdTree

" Open file under cursor in new tab
nnoremap <F9> <Esc><C-W>gF<CR>:tabm<CR>
" Open word under cursor as ctag in new tab
nnoremap <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>


" Chezmoi apply to .vimrc
if exists('*VimrcApply') == 0
  function! VimrcApply() abort
    write
    silent! execute '!chezmoi apply ~/.vimrc'
    sleep 100m
    source ~/.vimrc
    echom "✔ .vimrc applied and reloaded"
  endfunction

  command! VimrcApply call VimrcApply()
endif

nnoremap <leader>ca :VimrcApply<CR>


" Write current file with sudo perms
command! W w
command! -bang Qall qall

" Fast saving
nnoremap <leader>w :w!<cr>
" Fast quitting
nnoremap <leader>q :q!<cr>
" Fast editing of the .vimrc
nnoremap <leader>e :e! ~/.vimrc<cr>
" When vimrc is edited, reload it (commented out because of chezmoi workflow)
" autocmd! bufwritepost vimrc source ~/.vimrc

" Select all:
nnoremap <leader>a ggvG<cr>

""""""""""""
" Formatting
""""""""""""

set fo+=o       " Continue comment on 'o' or 'O'
set fo-=r       " Don't auto-insert comment leader after <Enter>
set fo-=t       " Don't auto-wrap text (use manual formatting)
set nowrap      " Disable hard wrapping
set textwidth=0 " No textwidth limit by default


" Command Completion UI
set wildmenu
set wildmode=longest,list

"""""""""""""""""""
" Utility Shortcuts
"""""""""""""""""""

" Base64 decode word under cursor
nnoremap <Leader>b :!echo <C-R><C-W> \| base64 -d<CR>

" grep recursively for word under cursor
nnoremap <Leader>g :tabnew\|read !grep -Hnr '<C-R><C-W>'<CR>

" sort the buffer removing duplicates
nnoremap <Leader>s :%!sort -u --version-sort<CR>

""""""""""""""""""""""""""
" Compile & Run Dispatcher
""""""""""""""""""""""""""

nnoremap <F5> :call CompileRun()<CR>

function! CompileRun() abort
  write
  let ft = &filetype

  if ft ==# 'c'
    execute '!gcc % -o %< && time ./%<'
  elseif ft ==# 'cpp'
    execute '!g++ % -o %< && time ./%<'
  elseif ft ==# 'java'
    execute '!javac % && time java -cp %:p:h %:t:r'
  elseif ft ==# 'sh'
    execute '!bash %'
  elseif ft ==# 'python'
    execute '!python3 %'
  elseif ft ==# 'html'
    execute '!firefox % &'
  elseif ft ==# 'go'
    execute '!go build %< && time go run %'
  elseif ft =~# 'markdown\|mkd'
    execute '!~/.vim/markdown.pl % > %.html && firefox %.html &'
  else
    echom "❌ CompileRun not supported for filetype: " . ft
  endif
endfunction
