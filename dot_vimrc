" Much of this is pulled from tomnomnom dotfiles
" and imxiaobo dotfiles
" Vundle

set nocompatible
filetype off

" let g:vundle_default_git_proto = 'git'
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Bundles
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
"Plugin 'sj1/gundo.vim'
Plugin 'godlygeek/tabular'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'TomNomNom/xoria256.vim'
"Plugin 'faith/vim-go'
Plugin 'rust-lang/rust.vim'
Plugin 'valloric/youcompleteme'
Plugin 'udalov/kotlin-vim'

call vundle#end()

" Required for vundle
filetype plugin indent on
filetype plugin on

" Highlighting
syntax on

set encoding=utf-8

" Airline config
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled=1
let g:airline_theme='powerlineish'

" History
set history=50

" Display
set ls=2
set showmode
set showcmd
set modeline
set ruler
set title
set nu

" Line wrapping
set nowrap
set linebreak

" Auto indent what you can
set autoindent

" Searching
set ignorecase
set smartcase
set gdefault
set hlsearch
set showmatch

" Enable jumping into files in a search buffer
set hidden

"Make backspace a bit nicer
set backspace=eol,start,indent

"Indentation
set shiftwidth=4
set tabstop=4
set softtabstop=4
set shiftround
set expandtab
set smartindent

" Colorscheme
if &t_Co == 256
    try
        color xoria256
    catch /^Vim\%((\a\+)\)\=:E185/
        " Oh well
    endtry
endif

" Switch Buffers
map <leader>8 :enew<CR>
map <leader>9 :bprevious<CR>
map <leader>0 :bnext<CR>
"Show all open buffers
map <leader>o :ls<CR>
"Close current buffer
map <leader>p :bp <BAR> bd #<CR>
" Switch tabs
map 8 <Esc>:tabe
map 9 gT
map 0 gt

" Open file under cursor in new tab
map <F9> <Esc><C-W>gF<CR>:tabm<CR>

" Write current file with sudo perms
command! W w
command! -bang Qall qall

" Fast saving
nmap <leader>w :w!<cr>
" Fast quitting
nmap <leader>q :q!<cr>
" Fast editing of the .vimrc
map <leader>e :e! ~/.vimrc<cr>
" When vimrc is edited, reload it
autocmd! bufwritepost vimrc source ~/.vimrc

" Select all:
nmap <leader>a ggvG<cr>

" Formatting
set fo+=o       "automatically insert the current comment leader after hitting 'o' or 'O' in normal mode
set fo-=r       "Do not automatically insert a comment leader after enter
set fo-=t       "Do not auto-wrap text using textwidth (does not apply to comments)
set nowrap
set textwidth=0 "Don't wrap lines by default

" Visual prompt for command completion
set wildmenu
set wildmode=longest,list

" Base64 decode word under cursor
nmap <Leader>b :!echo <C-R><C-W> \| base64 -d<CR>

" grep recursively for word under cursor
nmap <Leader>g :tabnew\|read !grep -Hnr '<C-R><C-W>'<CR>

" sort the buffer removing duplicates
nmap <Leader>s :%!sort -u --version-sort<CR>

" Open word under cursor as ctag in new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

" Python code
augroup Python
  autocmd BufReadPre,FileReadPre	*.py set tabstop=4
  autocmd BufReadPre,FileReadPre	*.py set expandtab
  autocmd BufReadPre,FileReadPre    *.py color slate
augroup END
" Java code.
augroup java
  autocmd BufReadPre,FileReadPre    *.java set tabstop=4
  autocmd BufReadPre,FileReadPre    *.java set expandtab
  autocmd BufReadPre,FileReadPre    *.java set autoindent
  autocmd BufReadPre,FileReadPre    *.java color slate 
  autocmd BufReadPre,FileReadPre    *.java set smartindent
augroup END
" Kotlin code
augroup Kotlin
 autocmd BufReadPre,FileReadPre    *.kt set tabstop=4
 autocmd BufReadPre,FileReadPre    *.kt set expandtab 
 autocmd BufReadPre,FileReadPre    *.kt set autoindent 
 autocmd BufReadPre,FileReadPre    *.kt color slate 
 autocmd BufReadPre,FileReadPre    *.kt set smartindent
augroup END

"augroup Bash
"    autocmd BufReadPre,FileReadPre  *.sh set tabstop=4
"    autocmd BufReadPre,FileReadPre  *.sh set expandtab
"    autocmd BufReadPre,FileReadPre  *.sh set slate

" mappings
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
exec "w"
if &filetype == 'c'
exec "!gcc % -o %<"
exec "!time ./%<"
elseif &filetype == 'cpp'
exec "!g++ % -o %<"
exec "!time ./%<"
elseif &filetype == 'java'
exec "!javac %"
exec "!time java -cp %:p:h %:t:r"
elseif &filetype == 'sh'
exec "!time bash %"
elseif &filetype == 'python'
exec "!time python2.7 %"
elseif &filetype == 'html'
exec "!firefox % &"
elseif &filetype == 'go'
exec "!go build %<"
exec "!time go run %"
elseif &filetype == 'mkd'
exec "!~/.vim/markdown.pl % > %.html &"
exec "!firefox %.html &"
endif
endfunc
